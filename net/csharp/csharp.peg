# Reference: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-334.pdf

Code                        <-      UsingDirectives Namespace* Class? EndOfFile
BOM                         <-      '\ufeff' / '\ufffe'

CompleteOp                  <-      '!'? CompleteGrouping (Op2 CompleteExpression)*
CompleteGrouping            <-      MethodCall / SpacedIdentifier
CompleteExpression          <-      CompleteOp
Complete                    <-      Spacing? CompleteExpression '.'? (Spacing / ';')* EndOfFile / Spacing? ([{}\[\]()] / Junk) Spacing? Complete
CompleteVariable            <-      SpacedAccess* Variable2 .* EndOfFile / Variable

UsingDirectives             <-      BOM? Spacing? Using*

Preproc                     <-      '#' (!EndOfLine .)+ EndOfLine

Namespace                   <-      Spacing? "namespace" Spacing SpacedDotIdentifier '{' Namespace* Class '}' Spacing?

Class                       <-      SpacedAccess* Spacing? ("class" / "struct") Spacing SpacedIdentifier Inheritance? ClassScope

Inheritance                 <-      ':' Spacing? (SpacedIdentifier ',' / SpacedIdentifier)+ Spacing?
Using                       <-      "using" Spacing SpacedDotIdentifier ';' Spacing?

SpacedDotIdentifier         <-      Spacing? DotIdentifier Spacing?
SpacedIdentifier            <-      Spacing? Identifier Spacing?
DotIdentifier               <-      Identifier '.' DotIdentifier / Identifier
Identifier                  <-      !Reserved [A-Za-z_] [A-Za-z_0-9]*


Reserved                    <-      ("if" / "else" / "return" / "while" / "for" / "foreach" / "public" / "private" / "protected" / "internal" / "throw" / "return" / "new" / "break" / "case" / "default" / "switch" / "enum" / "using") (![A-Za-z0-9_] .)


EnumValue                   <-      SpacedIdentifier ('=' Expression)?
Enum                        <-      SpacedAccess? "enum" Spacing SpacedIdentifier '{' (EnumValue ','?)* Spacing? '}' Spacing? ';' Spacing?

Type                        <-      SpacedDotIdentifier '<' Type '>' / SpacedDotIdentifier
ReturnType                  <-      Type ('[' Expression? ']')*

Parameters                  <-      (Parameter ',' Parameters) / Parameter
Parameter                   <-      ReturnType SpacedIdentifier? ('=' Expression)?

CallParameters              <-      CallParameter (',' CallParameter)*
CallParameter               <-      Expression

Char                        <-      '\'' (('\\' .) / .) '\''
String                      <-      '"' (('\\' .) / (!'"' .))* '"'
Integer                     <-      '-'? (("0x" [0-9a-fA-F]+) / [0-9]+)
Float                       <-      '-'? [0-9]+ '.' + [0-9]+

Primary                     <-      Char / String / Integer / Float / Identifier

Op2                         <-      '.' / (((">>" / "<<") '='?) / "&~" / "==" / "<=" / ">=" / "!=" / "||" / "&&" / ([^|&+*/<>=%.] / '-') '='?)
Op                          <-      Grouping (If2 / Op2 Expression)*

PostInc                     <-      (Index / SpacedIdentifier) "++"
PostDec                     <-      (Index / SpacedIdentifier) "--"
PreInc                      <-      "++" (Index / SpacedIdentifier)
PreDec                      <-      "--" (Index / SpacedIdentifier)

Return                      <-      Spacing? "return" Expression?

TypeCast                    <-      '(' SpacedIdentifier ')' Grouping
MethodCall                  <-      SpacedIdentifier '(' CallParameters? ')'

Grouping                    <-      Spacing?  (('!' Op) / Variable2 / TypeCast / ('(' Expression ')' / PostInc / PostDec / PreInc / PreDec / Index / MethodCall / Reference)) Spacing?

Index                       <-      SpacedIdentifier '[' Expression (',' Expression)* ']'
Reference                   <-      (TypeCast / Primary / SpacedIdentifier)

Throw                       <-      Spacing? "throw" Spacing Expression
InitializationList          <-      Spacing? ('[' Expression? ']')* Spacing? '{' (Expression (',' Expression?)*)? Spacing? '}'
New                         <-      Spacing? "new" Spacing ReturnType ( '(' CallParameters? ')')? InitializationList?

Expression                  <-      Throw / New / Return / Op / Grouping / Spacing? "break" Spacing?
Variable2                   <-      ReturnType SpacedIdentifier

Property                    <-      SpacedAccess* ReturnType SpacedIdentifier '{' (Spacing? ("get" / "set") Spacing? Scope)+ '}'

Variable                    <-      SpacedAccess* ReturnType (SpacedIdentifier ('=' (Expression / InitializationList))? (Spacing? ',' Spacing?)?)+ ';'
Constructor                 <-      SpacedAccess* SpacedIdentifier '(' Parameters? ')' Scope
Method                      <-      SpacedAccess* ReturnType SpacedIdentifier '(' Parameters? ')' Scope

Junk                        <-      (!Spacing ![{}\[\]()] .)+ Spacing?
SpacedAccess                <-      Spacing? Access Spacing
Access                      <-      ("public" / "protected" / "internal" / "private" / "static" / "sealed" / "override")

LineComment                 <-      "//" ((('\\' EndOfLine) / (!EndOfLine .)))+ EndOfLine Spacing?
BlockComment                <-      "/*" (!"*/" .)+ "*/" Spacing?
Comment                     <-      LineComment / BlockComment



Loops                       <-      For / Foreach / Do / While
Do                          <-      Spacing? "do" Scope "while" Spacing? '(' Expression ')' Spacing? ';'
For                         <-      Spacing? "for" Spacing? '(' (Variable / Expression? ';') (!';' .)* ';' (Expression (',' Expression)*)? ')' (Scope / Expression ';')
Foreach                     <-      Spacing? "foreach" Spacing? '(' Variable2 "in" Spacing Expression ')' (Scope / Expression ';')
While                       <-      Spacing? "while" Spacing? '(' Expression* ')' (Scope / Expression)


CaseLabel                   <-      Spacing? ("case" Spacing Primary Spacing? / "default") ':' Spacing? (!CaseLabel InnerScope)*
Switch                      <-      Spacing? "switch" Spacing? '(' Expression ')' Spacing? '{' Spacing? CaseLabel* Spacing? '}' Spacing?

If                          <-      Spacing? "if" Spacing? '(' Expression ')' (Scope / Expression ';') Spacing? Else?
Else                        <-      Spacing? "else " If / "else" (Scope / Expression ';')
If2                         <-      '?' Expression ':' Expression

ThisIndexer                 <-      SpacedAccess* ReturnType "this" '[' Parameters ']' Scope

ClassScope                  <-      Spacing? '{' (Spacing? (Class / Constructor / Method / Property / Enum / ThisIndexer / Variable / Junk))* '}' Spacing?
Scope                       <-      Spacing? '{'  InnerScope* Spacing? '}' Spacing?
InnerScope                  <-      Spacing? (Scope / Loops / If / Switch / Variable / Expression / Junk) Spacing? ';'? Spacing?

EndOfLine                   <-      "\n\r" / '\n' / '\r'
Spacing                     <-      ([ Â \t\n\r]+ / Comment+ / Preproc+)+
EndOfFile                   <-      !.
